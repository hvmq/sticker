import 'package:flutter/material.dart';
import '../../models/collection.dart';
import '../../services/collection_api.dart';

class CollectionProvider with ChangeNotifier {
  final int userId;

  CollectionProvider({required this.userId});

  List<Collection> _collections = [];

  List<Collection> get collections => _collections;

  /// üîÑ Fetch collections + c√°c sticker trong t·ª´ng collection
  Future<void> fetchCollectionsByUser() async {
    debugPrint('[CollectionProvider] üîÑ Fetching collections for user $userId...');
    try {
      final fetched = await CollectionApi.getCollectionsByUser(userId);
      _collections = [...fetched];
      debugPrint('[CollectionProvider] ‚úÖ Loaded ${_collections.length} collections');
    } catch (e, stack) {
      debugPrint('[CollectionProvider] ‚ùå Error fetching collections: $e');
      debugPrint('[CollectionProvider] ü™µ Stack trace: $stack');
    } finally {
      notifyListeners();
    }
  }

  /// ‚ûï T·∫°o collection m·ªõi
  Future<void> createNewCollection(String name) async {
    debugPrint('[CollectionProvider] ‚ûï Creating collection "$name" for user $userId');
    try {
      final newCollection = await CollectionApi.createCollection(userId: userId, name: name);
      _collections.add(newCollection);
      debugPrint('[CollectionProvider] ‚úÖ Added new collection with id ${newCollection.id}');
    } catch (e) {
      debugPrint('[CollectionProvider] ‚ùå Error creating collection "$name": $e');
    } finally {
      notifyListeners();
    }
  }

  /// üóëÔ∏è X√≥a collection theo id
  Future<void> deleteCollection(int id) async {
    debugPrint('[CollectionProvider] üóëÔ∏è Deleting collection $id');
    try {
      await CollectionApi.deleteCollection(id);
      _collections.removeWhere((c) => c.id == id);
      debugPrint('[CollectionProvider] ‚úÖ Deleted collection $id');
    } catch (e) {
      debugPrint('[CollectionProvider] ‚ùå Error deleting collection $id: $e');
    } finally {
      notifyListeners();
    }
  }

  /// ‚ûï Th√™m sticker v√†o collection
  Future<void> addStickerToCollection(int collectionId, String stickerId) async {
    debugPrint('[CollectionProvider] ‚ûï Adding sticker $stickerId to collection $collectionId');
    try {
      await CollectionApi.addStickerToCollection(
        collectionId: collectionId,
        userId: userId,
        stickerId: stickerId,
      );
      debugPrint('[CollectionProvider] ‚úÖ Added sticker $stickerId to collection $collectionId');
      await fetchCollectionsByUser();
    } catch (e) {
      debugPrint('[CollectionProvider] ‚ùå Error adding sticker: $e');
    }
  }

  /// üîÅ C·∫≠p nh·∫≠t sticker trong collection
  Future<void> updateStickerInCollection(
    int collectionId,
    String newStickerId,
    String oldStickerId,
  ) async {
    debugPrint('[CollectionProvider] üîÅ Updating sticker in collection $collectionId: $oldStickerId ‚Üí $newStickerId');
    try {
      await CollectionApi.updateStickerInCollection(
        collectionId: collectionId,
        userId: userId,
        newStickerId: newStickerId,
        oldStickerId: oldStickerId,
      );
      debugPrint('[CollectionProvider] ‚úÖ Updated sticker in collection $collectionId');
    } catch (e) {
      debugPrint('[CollectionProvider] ‚ùå Error updating sticker: $e');
    }
  }

  /// ‚úèÔ∏è C·∫≠p nh·∫≠t t√™n collection
  Future<void> updateCollection({
    required int collectionId,
    required String name,
  }) async {
    debugPrint('[CollectionProvider] ‚úèÔ∏è Updating collection $collectionId name to "$name"');
    try {
      await CollectionApi.updateCollection(
        collectionId: collectionId,
        userId: userId,
        name: name,
      );

      final index = _collections.indexWhere((c) => c.id == collectionId);
      if (index != -1) {
        _collections[index] = _collections[index].copyWith(name: name);
        debugPrint('[CollectionProvider] ‚úÖ Updated collection name');
      } else {
        debugPrint('[CollectionProvider] ‚ö†Ô∏è Collection $collectionId not found');
      }
    } catch (e) {
      debugPrint('[CollectionProvider] ‚ùå Error updating collection: $e');
    } finally {
      notifyListeners();
    }
  }

  /// üîç Ki·ªÉm tra sticker c√≥ n·∫±m trong collection n√†o kh√¥ng
  bool isStickerInCollection({
    required int collectionId,
    required String stickerId,
  }) {
    final collection = _collections.firstWhere(
      (c) => c.id == collectionId,
      orElse: () {
        debugPrint('[CollectionProvider] ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y collection v·ªõi id $collectionId');
        return Collection.empty();
      },
    );

    final exists = collection.stickers.any((s) => s.id == stickerId);
    debugPrint('[CollectionProvider] üîç Sticker $stickerId in collection $collectionId: $exists');
    return exists;
  }

  /// ‚ùå X√≥a sticker kh·ªèi 1 collection
  Future<void> removeStickerFromCollection({
    required int collectionId,
    required String stickerId,
  }) async {
    debugPrint('[CollectionProvider] ‚ùå Removing sticker $stickerId from collection $collectionId');
    try {
      await CollectionApi.removeStickerFromCollection(
        collectionId: collectionId,
        userId: userId,
        stickerId: stickerId,
      );
      debugPrint('[CollectionProvider] ‚úÖ Removed sticker $stickerId from collection $collectionId');
    } catch (e) {
      debugPrint('[CollectionProvider] ‚ùå Error removing sticker: $e');
    } finally {
      notifyListeners();
    }
  }

  /// üìã Tr·∫£ v·ªÅ danh s√°ch collection c√≥ ch·ª©a sticker
  List<Collection> getCollectionsContainingSticker(String stickerId) {
    final result = _collections.where((collection) => collection.stickers.any((s) => s.id == stickerId)).toList();

    debugPrint('[CollectionProvider] üìã Found ${result.length} collections containing sticker $stickerId');
    return result;
  }
}
